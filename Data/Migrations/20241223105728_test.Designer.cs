// <auto-generated />
using System;
using Data.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20241223105728_test")]
    partial class test
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Models.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AnonymousName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Read")
                        .HasColumnType("bit");

                    b.Property<string>("ReceiverId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SenderId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SenderId");

                    b.ToTable("Messages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 12, 23, 10, 57, 27, 884, DateTimeKind.Utc).AddTicks(553),
                            Read = false,
                            ReceiverId = "a6e8482e-1d8a-4b7c-889b-bcd4ff3c9b1d",
                            SenderId = "d3f29f8c-5a1c-4b25-a05f-3e345d1e4b2e",
                            Text = "Hello Bob!"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 12, 23, 10, 57, 27, 884, DateTimeKind.Utc).AddTicks(708),
                            Read = true,
                            ReceiverId = "c438f5e2-72fc-491d-9111-5e1229e77a73",
                            SenderId = "a6e8482e-1d8a-4b7c-889b-bcd4ff3c9b1d",
                            Text = "Hey Charlie!"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 12, 23, 10, 57, 27, 884, DateTimeKind.Utc).AddTicks(710),
                            Read = false,
                            ReceiverId = "fe237f44-dff8-4d0d-99a6-8b56544d86e9",
                            SenderId = "c438f5e2-72fc-491d-9111-5e1229e77a73",
                            Text = "Hi Diana!"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2024, 12, 23, 10, 57, 27, 884, DateTimeKind.Utc).AddTicks(711),
                            Read = true,
                            ReceiverId = "b254b7d9-00e4-4cd6-a1e4-8339f2d881c5",
                            SenderId = "fe237f44-dff8-4d0d-99a6-8b56544d86e9",
                            Text = "Hello Eve!"
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2024, 12, 23, 10, 57, 27, 884, DateTimeKind.Utc).AddTicks(712),
                            Read = false,
                            ReceiverId = "d3f29f8c-5a1c-4b25-a05f-3e345d1e4b2e",
                            SenderId = "b254b7d9-00e4-4cd6-a1e4-8339f2d881c5",
                            Text = "Hi Alice!"
                        });
                });

            modelBuilder.Entity("Models.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OwnerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Projects");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "A groundbreaking project.",
                            Image = "image1.png",
                            OwnerId = "d3f29f8c-5a1c-4b25-a05f-3e345d1e4b2e",
                            Title = "Project Alpha"
                        },
                        new
                        {
                            Id = 2,
                            Description = "An innovative project.",
                            Image = "image2.png",
                            OwnerId = "a6e8482e-1d8a-4b7c-889b-bcd4ff3c9b1d",
                            Title = "Project Beta"
                        },
                        new
                        {
                            Id = 3,
                            Description = "A creative project.",
                            Image = "image3.png",
                            OwnerId = "c438f5e2-72fc-491d-9111-5e1229e77a73",
                            Title = "Project Gamma"
                        },
                        new
                        {
                            Id = 4,
                            Description = "A futuristic project.",
                            Image = "image4.png",
                            OwnerId = "fe237f44-dff8-4d0d-99a6-8b56544d86e9",
                            Title = "Project Delta"
                        },
                        new
                        {
                            Id = 5,
                            Description = "An advanced project.",
                            Image = "image5.png",
                            OwnerId = "b254b7d9-00e4-4cd6-a1e4-8339f2d881c5",
                            Title = "Project Epsilon"
                        });
                });

            modelBuilder.Entity("Models.Qualification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly?>("EndDate")
                        .HasColumnType("date");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TypeId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("TypeId");

                    b.HasIndex("UserId");

                    b.ToTable("Qualifications");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "4-year degree",
                            EndDate = new DateOnly(2019, 6, 30),
                            StartDate = new DateOnly(2015, 9, 1),
                            Title = "BSc Computer Science",
                            TypeId = 1,
                            UserId = "d3f29f8c-5a1c-4b25-a05f-3e345d1e4b2e"
                        },
                        new
                        {
                            Id = 2,
                            Description = "2-year degree",
                            EndDate = new DateOnly(2022, 6, 30),
                            StartDate = new DateOnly(2020, 9, 1),
                            Title = "MSc Software Engineering",
                            TypeId = 2,
                            UserId = "a6e8482e-1d8a-4b7c-889b-bcd4ff3c9b1d"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Cloud computing certification",
                            EndDate = new DateOnly(2021, 12, 31),
                            StartDate = new DateOnly(2021, 1, 1),
                            Title = "AWS Certification",
                            TypeId = 3,
                            UserId = "c438f5e2-72fc-491d-9111-5e1229e77a73"
                        },
                        new
                        {
                            Id = 4,
                            Description = "1-year program",
                            EndDate = new DateOnly(2019, 6, 30),
                            StartDate = new DateOnly(2018, 9, 1),
                            Title = "Diploma in Data Science",
                            TypeId = 4,
                            UserId = "fe237f44-dff8-4d0d-99a6-8b56544d86e9"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Research-focused program",
                            EndDate = new DateOnly(2021, 6, 30),
                            StartDate = new DateOnly(2016, 9, 1),
                            Title = "PhD in Artificial Intelligence",
                            TypeId = 5,
                            UserId = "b254b7d9-00e4-4cd6-a1e4-8339f2d881c5"
                        });
                });

            modelBuilder.Entity("Models.QualificationType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("QualificationTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Bachelor's Degree"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Master's Degree"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Certification"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Diploma"
                        },
                        new
                        {
                            Id = 5,
                            Name = "PhD"
                        });
                });

            modelBuilder.Entity("Models.Skill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Skills");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Title = "C#"
                        },
                        new
                        {
                            Id = 2,
                            Title = "JavaScript"
                        },
                        new
                        {
                            Id = 3,
                            Title = "Python"
                        },
                        new
                        {
                            Id = 4,
                            Title = "SQL"
                        },
                        new
                        {
                            Id = 5,
                            Title = "DevOps"
                        });
                });

            modelBuilder.Entity("Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AvatarUri")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("Private")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "d3f29f8c-5a1c-4b25-a05f-3e345d1e4b2e",
                            AccessFailedCount = 0,
                            Address = "123 Main St",
                            AvatarUri = "avatar1.png",
                            ConcurrencyStamp = "db42b865-fb1f-44fd-8dbf-7f6326ac4f90",
                            Email = "alice@example.com",
                            EmailConfirmed = false,
                            FirstName = "Alice",
                            LastName = "Smith",
                            LockoutEnabled = false,
                            PasswordHash = "hash1",
                            PhoneNumberConfirmed = false,
                            Private = false,
                            SecurityStamp = "e6cff1ff-c21e-4706-9794-5ad282b92587",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "a6e8482e-1d8a-4b7c-889b-bcd4ff3c9b1d",
                            AccessFailedCount = 0,
                            Address = "456 Oak Ave",
                            AvatarUri = "avatar2.png",
                            ConcurrencyStamp = "203a429a-e343-493a-a0b1-89856edbee3c",
                            Email = "bob@example.com",
                            EmailConfirmed = false,
                            FirstName = "Bob",
                            LastName = "Johnson",
                            LockoutEnabled = false,
                            PasswordHash = "hash2",
                            PhoneNumberConfirmed = false,
                            Private = false,
                            SecurityStamp = "a8608bfd-37dc-4ca0-94da-f220771dbe55",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "c438f5e2-72fc-491d-9111-5e1229e77a73",
                            AccessFailedCount = 0,
                            Address = "789 Pine Blvd",
                            AvatarUri = "avatar3.png",
                            ConcurrencyStamp = "166337b3-d8f8-4f77-8fcb-0141505182d7",
                            Email = "charlie@example.com",
                            EmailConfirmed = false,
                            FirstName = "Charlie",
                            LastName = "Brown",
                            LockoutEnabled = false,
                            PasswordHash = "hash3",
                            PhoneNumberConfirmed = false,
                            Private = true,
                            SecurityStamp = "1b31af34-f082-441d-bd18-067b3c634278",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "fe237f44-dff8-4d0d-99a6-8b56544d86e9",
                            AccessFailedCount = 0,
                            Address = "321 Maple Ln",
                            AvatarUri = "avatar4.png",
                            ConcurrencyStamp = "d2f2d6ad-760e-4631-aa91-3cd783a5be0f",
                            Email = "diana@example.com",
                            EmailConfirmed = false,
                            FirstName = "Diana",
                            LastName = "White",
                            LockoutEnabled = false,
                            PasswordHash = "hash4",
                            PhoneNumberConfirmed = false,
                            Private = false,
                            SecurityStamp = "e1d3ca13-eb09-45e9-9cf4-7fedc17d3155",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "b254b7d9-00e4-4cd6-a1e4-8339f2d881c5",
                            AccessFailedCount = 0,
                            Address = "654 Elm Dr",
                            AvatarUri = "avatar5.png",
                            ConcurrencyStamp = "4c96fed8-483e-4128-8c84-4a085056c7aa",
                            Email = "eve@example.com",
                            EmailConfirmed = false,
                            FirstName = "Eve",
                            LastName = "Davis",
                            LockoutEnabled = false,
                            PasswordHash = "hash5",
                            PhoneNumberConfirmed = false,
                            Private = true,
                            SecurityStamp = "0fcb5e65-a424-46c3-8e1d-bf16040d4049",
                            TwoFactorEnabled = false
                        });
                });

            modelBuilder.Entity("Models.UserProject", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "ProjectId");

                    b.HasIndex("ProjectId");

                    b.ToTable("UserProjects");
                });

            modelBuilder.Entity("Models.UserSkill", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("SkillId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "SkillId");

                    b.HasIndex("SkillId");

                    b.ToTable("UserSkills");

                    b.HasData(
                        new
                        {
                            UserId = "d3f29f8c-5a1c-4b25-a05f-3e345d1e4b2e",
                            SkillId = 1
                        },
                        new
                        {
                            UserId = "a6e8482e-1d8a-4b7c-889b-bcd4ff3c9b1d",
                            SkillId = 2
                        },
                        new
                        {
                            UserId = "c438f5e2-72fc-491d-9111-5e1229e77a73",
                            SkillId = 3
                        },
                        new
                        {
                            UserId = "fe237f44-dff8-4d0d-99a6-8b56544d86e9",
                            SkillId = 4
                        },
                        new
                        {
                            UserId = "b254b7d9-00e4-4cd6-a1e4-8339f2d881c5",
                            SkillId = 5
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Models.Message", b =>
                {
                    b.HasOne("Models.User", "Receiver")
                        .WithMany("ReceivedMessages")
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.User", "Sender")
                        .WithMany("SentMessages")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("Models.Project", b =>
                {
                    b.HasOne("Models.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Models.Qualification", b =>
                {
                    b.HasOne("Models.QualificationType", "Type")
                        .WithMany("Qualifications")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.User", "User")
                        .WithMany("Qualifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Type");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.UserProject", b =>
                {
                    b.HasOne("Models.Project", "Project")
                        .WithMany("Users")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.User", "User")
                        .WithMany("Projects")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.UserSkill", b =>
                {
                    b.HasOne("Models.Skill", "Skill")
                        .WithMany("Users")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.User", "User")
                        .WithMany("Skills")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Skill");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.Project", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Models.QualificationType", b =>
                {
                    b.Navigation("Qualifications");
                });

            modelBuilder.Entity("Models.Skill", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Models.User", b =>
                {
                    b.Navigation("Projects");

                    b.Navigation("Qualifications");

                    b.Navigation("ReceivedMessages");

                    b.Navigation("SentMessages");

                    b.Navigation("Skills");
                });
#pragma warning restore 612, 618
        }
    }
}
